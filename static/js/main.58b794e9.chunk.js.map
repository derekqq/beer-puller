{"version":3,"sources":["slices/beerSlice.ts","store.ts","helpers/api.ts","helpers/routes.ts","helpers/replaceString.ts","components/SearchBox/SearchBox.tsx","components/BeerList/BeerListItem.tsx","components/BeerList/BeerNotFound.tsx","components/BeerList/BeerList.tsx","pages/BeerPuller.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["beerSlice","createSlice","name","initialState","beers","isPulled","reducers","setBeers","state","action","payload","actions","store","configureStore","reducer","beer","beerReducer","getByName","axios","get","string","replace","then","data","catch","error","debounce","require","SearchBox","useState","draft","setDraft","result","setResult","dispatch","useDispatch","useForm","register","handleSubmit","errors","fetchData","a","fetchedBeers","onSubmit","htmlFor","className","onChange","e","target","value","type","id","ref","required","minLength","length","ListItem","item","description","abv","image_url","scope","src","alt","useSelector","BeerList","beersList","map","BeerListItem","BeerNotFound","React","memo","BeerPuller","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.58b794e9.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport {IBeerArray} from \"types\"\n\nconst initialState: IBeerArray = {\n  beers: [],\n  isPulled: false,\n};\n\nconst beerSlice = createSlice({\n  name: 'beers',\n  initialState,\n  reducers: {\n    setBeers(state, action) {\n      state.beers = action.payload;\n      state.isPulled = true;\n    },\n  },\n});\n\nexport const { setBeers } = beerSlice.actions;\n\nexport const selectBeers = (state: IBeerArray) => state.beers;\n\nexport default beerSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\nimport beerReducer from 'slices/beerSlice';\n\nconst store = configureStore({\n  reducer: {\n    beer: beerReducer,\n  },\n});\n\nexport default store;\n","import axios from \"axios\";\nimport {serverUrl} from \"./routes\";\nimport {replaceSpace} from \"./replaceString\";\n\nexport const getByName = (name: string) => {\n  return axios\n    .get(`${serverUrl}?beer_name=${replaceSpace(name)}&page=1&per_page=3`)\n    .then(({ data }) => {\n      return data;\n    })\n    .catch(function (error) {\n      return error;\n    });\n};\n","export const serverUrl = 'https://api.punkapi.com/v2/beers';","export const replaceSpace = (string: string) => string.replace(/ /g, \"_\");","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { setBeers } from 'slices/beerSlice';\nimport {getByName} from 'helpers/api';\n\nconst debounce = require('lodash.debounce');\n\nconst SearchBox: React.FC = () => {\n  const [draft, setDraft] = useState('');\n  const [result, setResult] = useState('');\n\n  const dispatch = useDispatch();\n  const { register, handleSubmit, errors } = useForm();\n\n  const fetchData = async(name: string) => {\n    const fetchedBeers = await getByName(name);\n    dispatch(setBeers(fetchedBeers));\n    setResult(name);\n  }\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setDraft(e.target.value);\n    fetchData(e.target.value);\n  }\n\n  const onSubmit = () => {\n    fetchData(draft);\n    setDraft('');\n  };\n\n  return (\n    <>\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <label htmlFor=\"draft\">Type your beer name</label>\n      <div className=\"d-flex\">\n        <input\n          \n          onChange={debounce(handleChange,100)}\n          type=\"text\"\n          className=\"form-control\"\n          id=\"draft\"\n          name=\"draft\"\n          ref={register({ required: true, minLength: 1 })}\n        />\n        <button className=\"btn btn-primary\" type=\"submit\">\n          Search\n        </button>\n      </div>\n    </form>\n    {errors.draft && <p className=\"text-danger mt-1\">This field is required</p>}\n    {result.length>0 && <p className=\"h3\">Result for <strong>{result}</strong></p>}\n    </>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\nimport './BeerList.css';\n\nconst ListItem: React.FC<any> = ({ item: {id, name, description, abv, image_url}}) => {\n  return (\n    <tr>\n      <th className=\"text-dark\" scope=\"row\">\n        {id + 1}\n      </th>\n      <td className=\"text-dark\">{name}</td>\n      <td className=\"text-dark\">{description}</td>\n      <td className=\"text-dark\">\n        <img className=\"image\" src={image_url} alt=\"\"/>\n      </td>\n      <td className=\"text-dark\">{abv}</td>\n    </tr>\n  );\n};\n\nexport default ListItem;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport {IBeerArray, IState} from \"types\"\nimport './BeerList.css';\n\nconst ListItem: React.FC<any> = () => {\nconst isPulled =  useSelector((state: IState<IBeerArray>) => state.beer.isPulled);\n\n  return (\n    <p className=\"h3\">\n      {isPulled ? 'Not found beer, try again' : 'Use above input for fetch beer'}\n    </p>\n  );\n};\n\nexport default ListItem;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport {IBeerArray, IState} from \"types\"\n\nimport BeerListItem from './BeerListItem';\nimport BeerNotFound from './BeerNotFound';\n\nconst BeerList: React.FC = () => {\n  const beersList = useSelector((state: IState<IBeerArray>) => state.beer.beers);\n\n  return (\n    <>\n      <table className=\"table table-striped table-borderless\">\n        <thead>\n          <tr>\n            <th scope=\"col\">#</th>\n            <th scope=\"col\">Name</th>\n            <th scope=\"col\">Description</th>\n            <th scope=\"col\">Image</th>\n            <th scope=\"col\">abv</th>\n          </tr>\n        </thead>\n        <tbody>\n          {beersList.length > 0 && beersList.map((item) => (\n            <BeerListItem key={item.id} item={item} />\n          ))}\n        </tbody>\n      </table>\n      {beersList.length === 0 && <BeerNotFound/>}\n    </>\n  );\n};\n\nexport default React.memo(BeerList);\n","import React from 'react';\nimport SearchBox from '../components/SearchBox/SearchBox'\nimport BeerList from '../components/BeerList/BeerList'\n\nconst BeerPuller: React.FC = () => {\n  \n  return (\n    <div className=\"container mt-5\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <SearchBox />\n        </div>\n        <div className=\"col-12\">\n          <BeerList />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BeerPuller;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from 'store';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport BeerPuller from 'pages/BeerPuller';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <BeerPuller />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}